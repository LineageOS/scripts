{
  "comments": [
    {
      "key": {
        "uuid": "6507351f_e332d660",
        "filename": "aosp-merger/aosp-merger.sh",
        "patchSetId": 10
      },
      "lineNbr": 61,
      "author": {
        "id": 16082
      },
      "writtenOn": "2017-11-09T20:47:15Z",
      "side": 1,
      "message": ".\n\n    git diff-index --quiet HEAD --\n\nMaybe a better fit here? See https://stackoverflow.com/questions/3878624/how-do-i-programmatically-determine-if-there-are-uncommitted-changes",
      "range": {
        "startLine": 61,
        "startChar": 16,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "78bf131d5d6c164684d87c3d001b3b105b2f622f",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a705b87_99a2fab2",
        "filename": "aosp-merger/aosp-merger.sh",
        "patchSetId": 10
      },
      "lineNbr": 108,
      "author": {
        "id": 16082
      },
      "writtenOn": "2017-11-09T20:47:15Z",
      "side": 1,
      "message": "Perhaps you could use:\n\n    git ls-files -u\n\nas from what I understand, git status is for humans\n\nAnother alternative would be recording the status code returned by git merge, which should be 0 on clean merges and 1 on conflicts",
      "range": {
        "startLine": 108,
        "startChar": 16,
        "endLine": 108,
        "endChar": 34
      },
      "revId": "78bf131d5d6c164684d87c3d001b3b105b2f622f",
      "serverId": "1ec6b3db-b2c1-4fa4-84a2-4c7efe89ba71",
      "unresolved": false
    }
  ]
}